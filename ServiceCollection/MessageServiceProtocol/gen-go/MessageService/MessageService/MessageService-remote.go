/* Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package main

import (
        "flag"
        "fmt"
        "http"
        "net"
        "os"
        "strconv"
        "thrift"
        "thriftlib/MessageService"
)

func Usage() {
  fmt.Fprint(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:\n")
  flag.PrintDefaults()
  fmt.Fprint(os.Stderr, "Functions:\n")
  fmt.Fprint(os.Stderr, "  online(userId *UserId) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  offline(userId *UserId) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  sendMessage(userId *UserId, type_a1 string, message *Message) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  sendMessageToUserIdCollection(userIdCollection UserIdCollection, type_a1 string, message *Message) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "  getUserOnlineStatus(userIdCollection UserIdCollection) (retval139 thrift.TList, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  sendMessageWithOneOfflineMessage(userIdCollection UserIdCollection, type_a1 string, message *Message) (err os.Error)\n")
  fmt.Fprint(os.Stderr, "\n")
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var help bool
  var url http.URL
  var trans thrift.TTransport
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.BoolVar(&help, "help", false, "See usage string")
  flag.Parse()
  if help || flag.NArg() == 0 {
    flag.Usage()
  }
  
  if len(urlString) > 0 {
    url, err := http.ParseURL(urlString)
    if err != nil {
      fmt.Fprint(os.Stderr, "Error parsing URL: ", err.String(), "\n")
      flag.Usage()
    }
    host = url.Host
    useHttp = len(url.Scheme) <= 0 || url.Scheme == "http"
  } else if useHttp {
    _, err := http.ParseURL(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprint(os.Stderr, "Error parsing URL: ", err.String(), "\n")
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err os.Error
  if useHttp {
    trans, err = thrift.NewTHttpClient(url.Raw)
  } else {
    addr, err := net.ResolveTCPAddr("tcp", fmt.Sprint(host, ":", port))
    if err != nil {
      fmt.Fprint(os.Stderr, "Error resolving address", err.String())
      os.Exit(1)
    }
    trans, err = thrift.NewTNonblockingSocketAddr(addr)
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprint(os.Stderr, "Error creating transport", err.String())
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprint(os.Stderr, "Invalid protocol specified: ", protocol, "\n")
    Usage()
    os.Exit(1)
  }
  client := MessageService.NewMessageServiceClientFactory(trans, protocolFactory)
  if err = trans.Open(); err != nil {
    fmt.Fprint(os.Stderr, "Error opening socket to ", host, ":", port, " ", err.String())
    os.Exit(1)
  }
  
  switch cmd {
  case "online":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "Online requires 1 args\n")
      flag.Usage()
    }
    arg141 := flag.Arg(1)
    mbTrans142 := thrift.NewTMemoryBufferLen(len(arg141))
    defer mbTrans142.Close()
    _, err143 := mbTrans142.WriteString(arg141)
    if err143 != nil {
      Usage()
      return
    }
    factory144 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt145 := factory144.GetProtocol(mbTrans142)
    argvalue0 := MessageService.NewUserId()
    err146 := argvalue0.Read(jsProt145)
    if err146 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Online(value0))
    fmt.Print("\n")
    break
  case "offline":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "Offline requires 1 args\n")
      flag.Usage()
    }
    arg147 := flag.Arg(1)
    mbTrans148 := thrift.NewTMemoryBufferLen(len(arg147))
    defer mbTrans148.Close()
    _, err149 := mbTrans148.WriteString(arg147)
    if err149 != nil {
      Usage()
      return
    }
    factory150 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt151 := factory150.GetProtocol(mbTrans148)
    argvalue0 := MessageService.NewUserId()
    err152 := argvalue0.Read(jsProt151)
    if err152 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Offline(value0))
    fmt.Print("\n")
    break
  case "sendMessage":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SendMessage requires 3 args\n")
      flag.Usage()
    }
    arg153 := flag.Arg(1)
    mbTrans154 := thrift.NewTMemoryBufferLen(len(arg153))
    defer mbTrans154.Close()
    _, err155 := mbTrans154.WriteString(arg153)
    if err155 != nil {
      Usage()
      return
    }
    factory156 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt157 := factory156.GetProtocol(mbTrans154)
    argvalue0 := MessageService.NewUserId()
    err158 := argvalue0.Read(jsProt157)
    if err158 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg160 := flag.Arg(3)
    mbTrans161 := thrift.NewTMemoryBufferLen(len(arg160))
    defer mbTrans161.Close()
    _, err162 := mbTrans161.WriteString(arg160)
    if err162 != nil {
      Usage()
      return
    }
    factory163 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt164 := factory163.GetProtocol(mbTrans161)
    argvalue2 := MessageService.NewMessage()
    err165 := argvalue2.Read(jsProt164)
    if err165 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.SendMessage(value0, value1, value2))
    fmt.Print("\n")
    break
  case "sendMessageToUserIdCollection":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SendMessageToUserIdCollection requires 3 args\n")
      flag.Usage()
    }
    arg166 := flag.Arg(1)
    mbTrans167 := thrift.NewTMemoryBufferLen(len(arg166))
    defer mbTrans167.Close()
    _, err168 := mbTrans167.WriteString(arg166)
    if err168 != nil { 
      Usage()
      return
    }
    factory169 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt170 := factory169.GetProtocol(mbTrans167)
    containerStruct0 := MessageService.NewSendMessageToUserIdCollectionArgs()
    err171 := containerStruct0.ReadField1(jsProt170)
    if err171 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.UserIdCollection
    value0 := MessageService.UserIdCollection(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg173 := flag.Arg(3)
    mbTrans174 := thrift.NewTMemoryBufferLen(len(arg173))
    defer mbTrans174.Close()
    _, err175 := mbTrans174.WriteString(arg173)
    if err175 != nil {
      Usage()
      return
    }
    factory176 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt177 := factory176.GetProtocol(mbTrans174)
    argvalue2 := MessageService.NewMessage()
    err178 := argvalue2.Read(jsProt177)
    if err178 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.SendMessageToUserIdCollection(value0, value1, value2))
    fmt.Print("\n")
    break
  case "getUserOnlineStatus":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetUserOnlineStatus requires 1 args\n")
      flag.Usage()
    }
    arg179 := flag.Arg(1)
    mbTrans180 := thrift.NewTMemoryBufferLen(len(arg179))
    defer mbTrans180.Close()
    _, err181 := mbTrans180.WriteString(arg179)
    if err181 != nil { 
      Usage()
      return
    }
    factory182 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt183 := factory182.GetProtocol(mbTrans180)
    containerStruct0 := MessageService.NewGetUserOnlineStatusArgs()
    err184 := containerStruct0.ReadField1(jsProt183)
    if err184 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.UserIdCollection
    value0 := MessageService.UserIdCollection(argvalue0)
    fmt.Print(client.GetUserOnlineStatus(value0))
    fmt.Print("\n")
    break
  case "sendMessageWithOneOfflineMessage":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "SendMessageWithOneOfflineMessage requires 3 args\n")
      flag.Usage()
    }
    arg185 := flag.Arg(1)
    mbTrans186 := thrift.NewTMemoryBufferLen(len(arg185))
    defer mbTrans186.Close()
    _, err187 := mbTrans186.WriteString(arg185)
    if err187 != nil { 
      Usage()
      return
    }
    factory188 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt189 := factory188.GetProtocol(mbTrans186)
    containerStruct0 := MessageService.NewSendMessageWithOneOfflineMessageArgs()
    err190 := containerStruct0.ReadField1(jsProt189)
    if err190 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.UserIdCollection
    value0 := MessageService.UserIdCollection(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg192 := flag.Arg(3)
    mbTrans193 := thrift.NewTMemoryBufferLen(len(arg192))
    defer mbTrans193.Close()
    _, err194 := mbTrans193.WriteString(arg192)
    if err194 != nil {
      Usage()
      return
    }
    factory195 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt196 := factory195.GetProtocol(mbTrans193)
    argvalue2 := MessageService.NewMessage()
    err197 := argvalue2.Read(jsProt196)
    if err197 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.SendMessageWithOneOfflineMessage(value0, value1, value2))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprint(os.Stderr, "Invalid function ", cmd, "\n")
  }
}
