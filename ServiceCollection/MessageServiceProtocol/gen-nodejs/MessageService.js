//
// Autogenerated by Thrift Compiler (0.9.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = require('./MessageService_types');
//HELPER FUNCTIONS AND STRUCTURES

MessageService_online_args = function(args) {
  this.userId = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
  }
};
MessageService_online_args.prototype = {};
MessageService_online_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userId = new ttypes.UserId();
        this.userId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_online_args.prototype.write = function(output) {
  output.writeStructBegin('MessageService_online_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRUCT, 1);
    this.userId.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageService_online_result = function(args) {
};
MessageService_online_result.prototype = {};
MessageService_online_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_online_result.prototype.write = function(output) {
  output.writeStructBegin('MessageService_online_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageService_offline_args = function(args) {
  this.userId = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
  }
};
MessageService_offline_args.prototype = {};
MessageService_offline_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userId = new ttypes.UserId();
        this.userId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_offline_args.prototype.write = function(output) {
  output.writeStructBegin('MessageService_offline_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRUCT, 1);
    this.userId.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageService_offline_result = function(args) {
};
MessageService_offline_result.prototype = {};
MessageService_offline_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_offline_result.prototype.write = function(output) {
  output.writeStructBegin('MessageService_offline_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageService_sendMessage_args = function(args) {
  this.userId = null;
  this.type = null;
  this.message = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
MessageService_sendMessage_args.prototype = {};
MessageService_sendMessage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userId = new ttypes.UserId();
        this.userId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.message = new ttypes.Message();
        this.message.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_sendMessage_args.prototype.write = function(output) {
  output.writeStructBegin('MessageService_sendMessage_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRUCT, 1);
    this.userId.write(output);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 2);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRUCT, 3);
    this.message.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageService_sendMessage_result = function(args) {
};
MessageService_sendMessage_result.prototype = {};
MessageService_sendMessage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_sendMessage_result.prototype.write = function(output) {
  output.writeStructBegin('MessageService_sendMessage_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageService_sendMessageToUserIdCollection_args = function(args) {
  this.userIdCollection = null;
  this.type = null;
  this.message = null;
  if (args) {
    if (args.userIdCollection !== undefined) {
      this.userIdCollection = args.userIdCollection;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
MessageService_sendMessageToUserIdCollection_args.prototype = {};
MessageService_sendMessageToUserIdCollection_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.userIdCollection = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.UserId();
          elem6.read(input);
          this.userIdCollection.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.message = new ttypes.Message();
        this.message.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_sendMessageToUserIdCollection_args.prototype.write = function(output) {
  output.writeStructBegin('MessageService_sendMessageToUserIdCollection_args');
  if (this.userIdCollection !== null && this.userIdCollection !== undefined) {
    output.writeFieldBegin('userIdCollection', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.userIdCollection.length);
    for (var iter7 in this.userIdCollection)
    {
      if (this.userIdCollection.hasOwnProperty(iter7))
      {
        iter7 = this.userIdCollection[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 2);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRUCT, 3);
    this.message.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageService_sendMessageToUserIdCollection_result = function(args) {
};
MessageService_sendMessageToUserIdCollection_result.prototype = {};
MessageService_sendMessageToUserIdCollection_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_sendMessageToUserIdCollection_result.prototype.write = function(output) {
  output.writeStructBegin('MessageService_sendMessageToUserIdCollection_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MessageServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
MessageServiceClient.prototype = {};
MessageServiceClient.prototype.online = function(userId, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_online(userId);
};

MessageServiceClient.prototype.send_online = function(userId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('online', Thrift.MessageType.CALL, this.seqid);
  var args = new MessageService_online_args();
  args.userId = userId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MessageServiceClient.prototype.recv_online = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MessageService_online_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
MessageServiceClient.prototype.offline = function(userId, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_offline(userId);
};

MessageServiceClient.prototype.send_offline = function(userId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('offline', Thrift.MessageType.CALL, this.seqid);
  var args = new MessageService_offline_args();
  args.userId = userId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MessageServiceClient.prototype.recv_offline = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MessageService_offline_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
MessageServiceClient.prototype.sendMessage = function(userId, type, message, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_sendMessage(userId, type, message);
};

MessageServiceClient.prototype.send_sendMessage = function(userId, type, message) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('sendMessage', Thrift.MessageType.CALL, this.seqid);
  var args = new MessageService_sendMessage_args();
  args.userId = userId;
  args.type = type;
  args.message = message;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MessageServiceClient.prototype.recv_sendMessage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MessageService_sendMessage_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
MessageServiceClient.prototype.sendMessageToUserIdCollection = function(userIdCollection, type, message, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_sendMessageToUserIdCollection(userIdCollection, type, message);
};

MessageServiceClient.prototype.send_sendMessageToUserIdCollection = function(userIdCollection, type, message) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('sendMessageToUserIdCollection', Thrift.MessageType.CALL, this.seqid);
  var args = new MessageService_sendMessageToUserIdCollection_args();
  args.userIdCollection = userIdCollection;
  args.type = type;
  args.message = message;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MessageServiceClient.prototype.recv_sendMessageToUserIdCollection = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MessageService_sendMessageToUserIdCollection_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
MessageServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
MessageServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

MessageServiceProcessor.prototype.process_online = function(seqid, input, output) {
  var args = new MessageService_online_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.online(args.userId, function (err, result) {
    var result = new MessageService_online_result((err != null ? err : {success: result}));
    output.writeMessageBegin("online", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MessageServiceProcessor.prototype.process_offline = function(seqid, input, output) {
  var args = new MessageService_offline_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.offline(args.userId, function (err, result) {
    var result = new MessageService_offline_result((err != null ? err : {success: result}));
    output.writeMessageBegin("offline", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MessageServiceProcessor.prototype.process_sendMessage = function(seqid, input, output) {
  var args = new MessageService_sendMessage_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.sendMessage(args.userId, args.type, args.message, function (err, result) {
    var result = new MessageService_sendMessage_result((err != null ? err : {success: result}));
    output.writeMessageBegin("sendMessage", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MessageServiceProcessor.prototype.process_sendMessageToUserIdCollection = function(seqid, input, output) {
  var args = new MessageService_sendMessageToUserIdCollection_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.sendMessageToUserIdCollection(args.userIdCollection, args.type, args.message, function (err, result) {
    var result = new MessageService_sendMessageToUserIdCollection_result((err != null ? err : {success: result}));
    output.writeMessageBegin("sendMessageToUserIdCollection", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

