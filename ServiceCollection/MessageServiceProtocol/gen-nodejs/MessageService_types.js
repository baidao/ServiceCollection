//
// Autogenerated by Thrift Compiler (0.9.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var ttypes = module.exports = {};
UserId = module.exports.UserId = function(args) {
  this.uid = null;
  this.type = null;
  this.clientType = null;
  if (args) {
    if (args.uid !== undefined) {
      this.uid = args.uid;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.clientType !== undefined) {
      this.clientType = args.clientType;
    }
  }
};
UserId.prototype = {};
UserId.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.clientType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserId.prototype.write = function(output) {
  output.writeStructBegin('UserId');
  if (this.uid !== null && this.uid !== undefined) {
    output.writeFieldBegin('uid', Thrift.Type.STRING, 1);
    output.writeString(this.uid);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 2);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.clientType !== null && this.clientType !== undefined) {
    output.writeFieldBegin('clientType', Thrift.Type.STRING, 3);
    output.writeString(this.clientType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Message = module.exports.Message = function(args) {
  this.type = null;
  this.datetime = null;
  this.createdAt = null;
  this.content = null;
  this.fromId = null;
  this.toId = null;
  this.isRead = null;
  this.readDateTime = null;
  if (args) {
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.datetime !== undefined) {
      this.datetime = args.datetime;
    }
    if (args.createdAt !== undefined) {
      this.createdAt = args.createdAt;
    }
    if (args.content !== undefined) {
      this.content = args.content;
    }
    if (args.fromId !== undefined) {
      this.fromId = args.fromId;
    }
    if (args.toId !== undefined) {
      this.toId = args.toId;
    }
    if (args.isRead !== undefined) {
      this.isRead = args.isRead;
    }
    if (args.readDateTime !== undefined) {
      this.readDateTime = args.readDateTime;
    }
  }
};
Message.prototype = {};
Message.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.datetime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.createdAt = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.fromId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.toId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.isRead = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.readDateTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Message.prototype.write = function(output) {
  output.writeStructBegin('Message');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.datetime !== null && this.datetime !== undefined) {
    output.writeFieldBegin('datetime', Thrift.Type.STRING, 2);
    output.writeString(this.datetime);
    output.writeFieldEnd();
  }
  if (this.createdAt !== null && this.createdAt !== undefined) {
    output.writeFieldBegin('createdAt', Thrift.Type.I32, 3);
    output.writeI32(this.createdAt);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 4);
    output.writeString(this.content);
    output.writeFieldEnd();
  }
  if (this.fromId !== null && this.fromId !== undefined) {
    output.writeFieldBegin('fromId', Thrift.Type.STRING, 5);
    output.writeString(this.fromId);
    output.writeFieldEnd();
  }
  if (this.toId !== null && this.toId !== undefined) {
    output.writeFieldBegin('toId', Thrift.Type.STRING, 6);
    output.writeString(this.toId);
    output.writeFieldEnd();
  }
  if (this.isRead !== null && this.isRead !== undefined) {
    output.writeFieldBegin('isRead', Thrift.Type.BOOL, 7);
    output.writeBool(this.isRead);
    output.writeFieldEnd();
  }
  if (this.readDateTime !== null && this.readDateTime !== undefined) {
    output.writeFieldBegin('readDateTime', Thrift.Type.I32, 8);
    output.writeI32(this.readDateTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

